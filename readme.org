#+title: Curupira


#+begin_src emacs-lisp :exports result :results output 
  (let ((default-directory (locate-dominating-file default-directory ".git"))
        (tag nil))
    (if default-directory
        (with-temp-buffer
          (when (= 0 (call-process "git" nil t nil "describe" "--tags" "--abbrev=0"))
            (setq tag (string-trim (buffer-string))))
          (if (and tag (not (string= "" tag)))
              (print (format"Current GitHub tag: %s" tag))
            (print "No tags found for this repository")))
      (print "Not in a git repository")))
#+end_src

#+RESULTS:
: 
: "No tags found for this repository"

** About 
Elixir template to generate a client-side rendered frontend application.

This template is focused on small frontend projects that one usually would write with html + [s]css + ts/js, but here we use elixir instead of js/ts.

Basically we comile elixir into js and that's it.

This library uses:
#+begin_src emacs-lisp :exports results :results output 
  (let ((mix-file (expand-file-name "./template/$PROJECT_NAME$/mix.exs")))
    (if (file-exists-p mix-file)
        (with-temp-buffer
          (insert-file-contents mix-file)
          (goto-char (point-min))
          (if (re-search-forward "defp deps do\\s-*\\[\\(\\(?:.\\|\n\\)*?\\)\\]\\s-*end" nil t)
              (let ((deps-text (match-string 1)))
                (princ deps-text))
            (message "Could not find deps function in mix.exs")
            nil))
      (message "Could not find mix.exs file at %s" mix-file)))
#+end_src

#+RESULTS:
: 
:       {:elixir_script_web, "~> 0.2"},
:       {:elixir_script, "~> 0.32.1"},
:       {:mix_test_watch, "~> 1.0", only: :dev},
:       {:exsync, "~> 0.4", only: [:dev, :test]}
:     

A valid note is that =elixir_script_*= doesn't have mantainers, so we can expect some bugs during the elixir <-> js conversion.

** Installing the template

1. Clone this project
2. Install mix template/generator
   #+begin_src shell :exports both :results output 
     mix archive.install hex mix_templates
     mix archive.install hex mix_generator
#+end_src
3. CD into this project
4. run =mix template.install=

** Using the template

#+begin_src shell :exports both :results output 
  mix gen curupira project_name
#+end_src

and that's it.

** Running your elixir based frontend project

First you need to install everything, inside your project:

#+begin_src shell :exports both :results output 
  mix deps.get
  npm i # yes, of course you must have npm installed
#+end_src

Then

#+begin_src shell :exports both :results output 
  mix watch.compile # this will open your project on the port on config.exs
  # this will watch your elixir files for changes and then compile.
  # might get slow if your project gets too big... in this case you can run the `mix compile` manually and only run the frontend with `npm run dev`
#+end_src

Unfortunatelly, when you kill the =watch.compile= it does not kill the frontend project, to do that you can use =mix port.kill=.

The frontend project will execute the function =YourProject.main()=

You can add the styles in =styles/main.scss=

All html files in =html/=.

If you need to add extra JS, check =js/index.js=.

** Licence

This project is free and it always will be.

=GPL-3+= 
